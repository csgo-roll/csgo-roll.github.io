{"pageProps":{"post":{"title":"Provably Fair Verified By iTechLabs | CSGORoll","excerpt":"Our 'Provably Fair' methods have been independently verified by one of the leading accredited testing laboratories for online gaming! Recently, we hired iTechLabs to verify the legitimacy of our 'Provably Fair' methods. An accredited laboratory for o","content_html":"<section class=\"post-full-content\">\n<div class=\"post-content\">\n<p>\n<em>\n    Our 'Provably Fair' methods have been independently verified by one of the leading accredited testing laboratories for online gaming!\n   </em>\n</p>\n<p>\n   Recently, we hired\n   \n    iTechLabs\n   \n   to verify the legitimacy of our 'Provably Fair' methods. An accredited laboratory for online gaming certification and quality assurance testing, iTechLabs have tested and certified almost all types of casino games on a wide range of platforms for 14 years.\n  </p>\n<p>\n   With this external verification, we're proud to share that the systems we use to determine our games have passed independent authentication!\n  </p>\n<p>\n   When you play on CSGORoll, our 'Provably Fair' system generates a random result using multiple separate elements. Together, these elements prove the randomness of each of our games.\n  </p>\n<p>\n   Unlike other CS:GO skins sites on the scene, this independent verification proves that we're doing all we should to publicly determine our outcomes, so that you can be certain of our fairness.\n  </p>\n<p>\n   All in all, iTechLabs's certification only resulted in a few changes, of which you can explore below.\n  </p>\n<hr>\n<h2 id=\"rng-technical-changes\">\n   RNG Technical Changes\n  </h2>\n<h3 id=\"%E2%80%94-seed-generation\">\n   — Seed Generation\n  </h3>\n<p>\n<strong>\n<em>\n     Games impacted: Unboxing, Box Battles\n    </em>\n</strong>\n</p>\n<p>\n   We have added a fourth value (Game Mode) to the secret seed generation for Unboxing and Box Battles. This was done as a precaution to increase security against potential exploits, as it makes it impossible for RNGs across the different game modes to recycle seeds.\n  </p>\n<p>\n<strong>\n    Seed Generation before:\n   </strong>\n</p>\n<pre><code class=\"language-javascript\">function getCombinedSeed(serverSeed, clientSeed, nonce) {\n  // Add main parameters\n  const seedParameters = [serverSeed, clientSeed, nonce];\n\n  // Combine parameters to get seed value\n  return seedParameters.join('-')\n}</code></pre>\n<p>\n<strong>\n    Seed Generation after:\n   </strong>\n</p>\n<pre><code class=\"language-javascript\">function getCombinedSeed(game, serverSeed, clientSeed, nonce) {\n  // Add main parameters\n  const seedParameters = [serverSeed, clientSeed, nonce];\n\n  // Add game parameter if needed\n  if (game) {\n    seedParameters.unshift(game);\n  }\n\n  // Combine parameters to get seed value\n  return seedParameters.join('-')\n}</code></pre>\n<h3 id=\"%E2%80%94-random-number-generation\">\n   — Random Number Generation\n  </h3>\n<p>\n<strong>\n<em>\n     Impacted games: Roll, Unboxing, Plinko, PvP Case Battles, PvP Coin Flip, PvP Dice\n    </em>\n</strong>\n</p>\n<p>\n   We have tweaked our RNG in order to achieve more cryptographic strength and increased security from potential exploits.\n  </p>\n<p>\n<strong>\n<em>\n     Change 1:\n    </em>\n</strong>\n   We moved from using a 32-bit integer (8 character length Hexadecimal hash) to a 52-bit integer (13 character length Hexadecimal hash) - this is simply to increase the cryptographic strength of the generated number.\n  </p>\n<p>\n<strong>\n<em>\n     Change 2:\n    </em>\n</strong>\n   We have amended the method used to get from the raw integer coming from the hash value to the final random result (being a number from 0-X; where X = the max possible result). In our previous version, we used the Modulo\n   <code>\n    %\n   </code>\n   operation with Max possible result (e.g.\n   <code>\n    1^8\n   </code>\n   for Unboxing), which would return the final result as a remainder amount in the range of 0 - Max.\n   <br>\n<br>\n   We now have tweaked this method, instead of using the Modulo operation, we divide the raw integer generated by the hash by the maximum possible integer (2^52). This gives us a floating point number from 0-0.9999999 recurring.\n   <br>\n   We then multiply this number by the Max possible result and use\n   <code>\n    floor\n   </code>\n   to round down, giving an integer result in the range of 0 - Max.\n   <br>\n<br>\n<strong>\n<em>\n     Change 3:\n    </em>\n</strong>\n   Some of our games RNGs previously utilised ranges of between 1 - Max, while others generated results between 0 - Max. We have normalised this now, so that all game modes RNG’s start from zero, instead of 1, as was the case in some instances previously.\n  </p>\n<p>\n<strong>\n    Random Number Generation before:\n   </strong>\n</p>\n<pre><code class=\"language-javascript\">function getRandomInt({ max, min, seed }) {\n  // Get hash from seed\n  log(`Seed value: ${seed}`);\n  const hash = crypto.createHmac('sha256', seed).digest('hex');\n\n  // Get value from hash\n  const subHash = hash.slice(0, 8);\n  const valueFromHash = Number.parseInt(subHash, 16);\n\n  // Get dynamic result for this roll\n  const random = Math.abs(valueFromHash) % max;\n  return random + min;\n}</code></pre>\n<p>\n<strong>\n    Random Number Generation after:\n   </strong>\n</p>\n<pre><code class=\"language-javascript\">function getRandomInt({ max, seed }) {\n  // Get hash from seed\n  log(`Seed value: ${seed}`);\n  const hash = crypto.createHmac('sha256', seed).digest('hex');\n\n  // Get value from hash\n  const subHash = hash.slice(0, 13);\n  const valueFromHash = Number.parseInt(subHash, 16);\n\n  // Get dynamic result for this roll\n  const e = Math.pow(2, 52);\n  const result = valueFromHash / e;\n  return Math.floor(result * max);\n}</code></pre>\n<h3 id=\"dice-upgrade-rng\">\n   Dice / Upgrade RNG\n  </h3>\n<p>\n<strong>\n<em>\n     Impacted games: Dice, Item Upgrade\n    </em>\n</strong>\n</p>\n<p>\n   We have added a fourth value to the secret seed (Iteration) used to generate results for our Dice and Item Upgrade game modes. This ensures that results are not exploitable and eradicate the possibility for a skewed result in very rare edge cases.\n  </p>\n<p>\n<strong>\n    RNG before:\n   </strong>\n</p>\n<pre><code class=\"language-javascript\">function getDiceRoll(serverSeed, clientSeed, nonce) {\n  const hash = getHash(serverSeed, clientSeed, nonce);\n  let index = 0;\n  let lucky = getLucky(hash, index);\n\n  while (lucky &gt;= Math.pow(10, 6)) {\n    index++;\n    lucky = getLucky(hash, index);\n    // We have reached the end of the hash and they all must have been FFFFFF hex value\n    if (Math.imul(index, 5) + 5 &gt; 129) {\n      return 9999;\n    }\n  }\n\n  lucky %= Math.pow(10, 4);\n\n  return lucky;\n}\n\nfunction getLucky(hash, index) {\n  const hashLucky = hash.substr(Math.imul(index, 5), 5);\n  return parseInt(hashLucky, 16);\n}\n\nfunction getHash(serverSeed, clientSeed, nonce) {\n  const hmac = crypto.createHmac('sha512', serverSeed);\n  hmac.update(`${clientSeed}-${nonce}`);\n  return hmac.digest('hex');\n}</code></pre>\n<p>\n<strong>\n    RNG after:\n   </strong>\n</p>\n<pre><code class=\"language-javascript\">function getDiceRoll({ clientSeed, game, iteration = 0, nonce, serverSeed }) {\n  // Prepare seed parameters\n  const seedParameters = [clientSeed, nonce];\n  if (game) {\n      seedParameters.unshift(game);\n  }\n\n  // Get hash from seed values\n  const hmac = crypto.createHmac('sha512', serverSeed);\n  hmac.update(`${seedParameters.join('-')}-${iteration}`);\n  const hash = hmac.digest('hex');\n\n  // Initialize variables\n  let index = 0;\n  let lucky = getLucky(hash, index);\n\n  // Process the hash until left with lucky result\n  while (lucky &gt;= Math.pow(10, 6)) {\n      index++;\n      lucky = getLucky(hash, index);\n\n      // Reaching the end of the hash, run the calculations again\n      if (Math.imul(index, 5) + 5 &gt; 128) {\n        return getDiceRoll({ clientSeed, game, iteration: iteration + 1, nonce, serverSeed });\n      }\n  }\n\n  // Return lucky float number\n  lucky %= Math.pow(10, 4);\n\n  return lucky;\n}\n\nfunction getLucky(hash, index) {\n  const hashLucky = hash.slice(Math.imul(index, 5), Math.imul(index, 5) + 5);\n    return Number.parseInt(hashLucky, 16);\n}</code></pre>\n<hr>\n<p>\n<em>\n    Got a question about our verification? Visit our dedicated '\n    <a href=\"https://csgoroll.com/r/4tmr\">\n     Provably Fair\n    </a>\n    ' section on CSGORoll, or\n    <a href=\"https://csgoroll.com/r/4tmr\">\n     get in touch\n    </a>\n    .\n   </em>\n</p>\n</div>\n</section>"}},"mail":{"address":"dota2sites@gmail.com"},"site":{"short_name":"CSGORoll","name":"CSGORoll | Win CSGO skins at the world's longest established CSGO game site!","description":"Play with the biggest, best and most trusted CSGO game operator. CSGORoll offers an amazing online experience to win skins.","avatar":"4WTiDjwI","promos":[{"code":"4tmr","bonus":"3 free cases and a 5% bonus added to all cash deposits.","uid":"fu9Z6oNW"}]},"navis":[{"name":"Home","title":"Home page","url":"/","order":0},{"name":"Contact","title":"Contact","url":"/contact","order":0},{"name":"Privacy","title":"Privacy","url":"/privacy","order":0}],"__N_SSG":true}